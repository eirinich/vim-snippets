priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
	public:
		${1/(\w+).*/$1/}(${2:arguments});
		virtual ~${1/(\w+).*/$1/}();

	private:
		${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}${1/.+/  \/\/ /m}${1/(\w+).*/$1/}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet list "std::list (list)"
std::list<${1:type}> ${0:list};
endsnippet

snippet set "std::set (set)"
std::list<${1:type}> ${0:set};
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> ${0:map};
endsnippet

snippet vector "std::vector (vec)"
std::vector<${1:char}> ${0:vec};
endsnippet

snippet array "boost::array (type, size)"
boost::array<${1:int}, ${2:size}> ${0:array};
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet iter
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:it} = ${5:container}.begin();
		$4 != $5.end(); ++$4)
{
	${6}
}
endsnippet

=======
snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	${3}

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet

# vim:ft=snippets:
